import maybe;
import string;
import lingo/pegcode/driver;
import ds/tree;
import dynamic;

export{
    Prog: (h: [Decl], b: Body);
    Decl: (v: Var, t: Type);

    Int(v: int);
    Var(n: string);
    Type ::= bType, arrType;
    bType : (t: string);
    arrType : (t: Type);

    Body ::= nAssign, nTest, nSeq, nUnion, nIter, nPrint;
    nAssign: (v: Var, e: Exp);
    nTest:  (e: Exp);
    nSeq: (l: Body, r: Body);
    nUnion: (l: Body, r:Body);
    nIter: (b: Body);
    nPrint: (e: Exp);

    Arg ::= Int, Var;
    Exp ::= Arg, Sum, Sub, Prod, Div, aSet, aGet;
    Sum : (l: Exp, r: Exp);
    Prod : (l: Exp, r: Exp);
    Sub : (l: Exp, r: Exp);
    Div : (l: Exp, r: Exp);
    aSet : (a: Var, i: Arg, v: Arg);
    aGet : (a: Var, i: Arg);

    parse(s: string) -> Maybe<Prog>;
    // no pr2s for now
}

grammar = "#include nemo.lingo";

parse(s: string) -> Maybe<Prog>{
    parser = compilePegGrammar(grammar);
    ret = parsic3(parser, s, defaultPegActions, Prog([], nTest(Int(0))) );
    if(ret.third == "") { Some(ret.first); } else { println(ret.third); None() }
}


//unionl = "(" ws helper+:d body:l")"
//helper = body:b ws "U" ws