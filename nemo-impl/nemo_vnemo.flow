import ds/tree;
import ds/array;
import string;
import maybe;

export{
    vProg : (h: [vDecl], b: vBody);
    vDecl: (v: vVar, t: vType);
    vBody : (m: [vLabel]);
    vLabel: (id: int, i: vInstr, l: [int]);

    vInstr ::= vAssign, vIf, vPrint;
    vAssign : (v: vVar, e: vExp);
    vIf : (c: vExp);
    vPrint : (e: vExp);

    vVal ::= vInt, vArr;
    vInt: (v: int);
    vArr: (a: [vVal]);

    vVar(n: string);
    vType ::= vBType, vArrType;
    vBType : (t: string);
    vArrType : (t: vType);

    vExp ::= vVal, vVar, vSum, vSub, vProd, vDiv, vSet, vGet, vLen;
    vSum : (l: vExp, r: vExp);
    vProd : (l: vExp, r: vExp);
    vSub : (l: vExp, r: vExp);
    vDiv : (l: vExp, r: vExp);
    vSet : (a: vVar, i: vInt, v: vExp);
    vGet : (a: vVar, i: vInt);
    vLen : (a: vVar);

    vExecute(p: vProg) -> void;
}

State:(labels: [int], vars: Tree<vVar, vVal>);

vExecute(p: vProg) -> void{
    vars = initDeclsTree(p.h);
    while(p.b, State([0], vars));
}

while(b: vBody, state: State) -> void{
    iterationState = fold(state.labels, state, 
        \acc, ind -> {
            newState = labelExecute(b.m[ind], acc.vars);
            State(concat(acc.labels, newState.labels), newState.vars);
            });
    if(isStopped(iterationState.labels, length(b.m))){
        while(b, iterationState);
    } else {
        println("vNeMo Executor: done"); //workaround
    }
}

isStopped(labels: [int], stoplabel: int) -> bool{
    if(
        length(labels) == 0 || 
        (length(labels) == 1 && labels[0] == stoplabel)
        ){
            true;
    }else{
        false;
    }
}

labelExecute(lbl: vLabel, vars: Tree<vVar, vVal>) -> State {
    switch (lbl.i) {
        vAssign(v, e): {
            State(lbl.l, setTree(vars, v, expEval(e, vars)));
        }
        vIf(c): {
            if(expEval(c, vars) != vInt(0)){
                State(lbl.l, vars);
            } else {
                State([], vars);
            }
        }
        vPrint(e): {
            println(v2s(expEval(e, vars)));
            State([], vars);
        }
    }
}

expEval(e: vExp, vars: Tree<vVar, vVal>) -> vVal{
    switch (e) {
        vInt(v): vInt(v);
        vArr(v): vArr(v);
        vVar(v): vLookup(vVar(v), vars);
        vSum(l, r)  : vInt(
            v2i(expEval(l, vars)) + 
            v2i(expEval(r, vars))
            );
        vProd(l, r) : vInt(
            v2i(expEval(l, vars)) * 
            v2i(expEval(r, vars))
            );
        vSub(l, r)  : vInt(
            v2i(expEval(l, vars)) - 
            v2i(expEval(r, vars))
            );
        vDiv(l, r)  : vInt(
            v2i(expEval(l, vars)) / 
            v2i(expEval(r, vars))
            );
        vSet(a, i, v) : vInt(0); //TODO move out of Exp
        vGet(a, ind) :
            valueGet(vLookup(a, vars), ind.v);
        vLen(a):
            vLength(vLookup(a, vars));
    }
}

v2i(val: vVal) -> int{
    switch (val) {
        vInt(v): v;
        vArr(a): {
            println("Runtime error: Arr in v2i");
            quit(-1);
            -1;
        };
    }
}

vLookup(var: vVar, vars: Tree<vVar, vVal>) -> vVal{
    either(
        lookupTree(vars, var),
        {
            println("Runtime error: variable not found");
            quit(-1);
            vInt(-1);
        }
    )
}

vLength(val: vVal) -> vInt{
    switch (val) {
        vArr(v): vInt(length(v));
        vInt(v): {
            println("Runtime error: len(Int)");
            quit(-1);
            vInt(-1);
        }
    }
}

valueGet(val: vVal, i: int) -> vVal{
    switch(val){
        vArr(v): {
            if(i < length(v)){
                v[i]; 
            } else { 
                println("Runtime error: OOB " + i2s(i) + " on " + v2s(val));
                quit(-1);
                vInt(-1);
            }
        };
        vInt(v): { 
            println("Runtime error: Int in valueGet");
            quit(-1);
            vInt(-1);
        };
    }
}

v2s(val: vVal) -> string{
    switch (val) {
        vArr(v): 
            "[" + 
            strGlue(
            map(v, \x -> v2s(x)),
            ", ") + 
            "]";
        vInt(v): i2s(v);
    }
}

initDeclsTree(h: [vDecl]) -> Tree<vVar, vVal> {
    fold(h, makeTree(), \acc, decl -> setTree(acc, decl.v, initType(decl.t)));
}

initType(t: vType) -> vVal{
    switch (t) {
        vArrType(v): vArr([initType(v)]);
        vBType(v): vInt(0);
    }
}

