import maybe;
import string;
import lingo/pegcode/driver;
import ds/tree;
import ds/array;
import dynamic;

export{
    Prog: (h: [Decl], b: Body);
    Decl: (v: Var, t: Type);

    Int(v: int);
    Var(n: string);
    Type ::= bType, arrType;
    bType : (t: string);
    arrType : (t: Type);

    Body ::= nAssign, nTest, nSeq, nUnion, nIter, nPrint;
    nAssign: (v: Var, e: Exp);
    nTest:  (e: Exp);
    nSeq: (b: [Body]);
    nUnion: (b: [Body]);
    nIter: (b: Body);
    nPrint: (e: Exp);

    Arg ::= Int, Var;
    Exp ::= Arg, Sum, Sub, Prod, Div, aSet, aGet;
    Sum : (l: Exp, r: Exp);
    Prod : (l: Exp, r: Exp);
    Sub : (l: Exp, r: Exp);
    Div : (l: Exp, r: Exp);
    // returns 0 or 1 on error/success
    aSet : (a: Var, i: Arg, v: Arg); 
    aGet : (a: Var, i: Arg); 

    parse(s: string) -> Maybe<Prog>;
    // no pr2s for now
}

grammar = "#include nemo.lingo";

buildUnion(xs : [flow]) -> nUnion{
    nUnion(arrayPush(xs[0], xs[1]));
}

buildSeq(xs : [flow]) -> nSeq{
    nSeq(arrayPush(xs[0], xs[1]));
}

parse(s: string) -> Maybe<Prog>{
    parser = compilePegGrammar(grammar);
    specialPegActions = {
        t = setTree(defaultPegActions.t, "buildUnion", buildUnion);
        t2 = setTree(t, "buildSeq", buildSeq);
        SemanticActions(t2);
    }
    ret = parsic3(parser, s, specialPegActions, Prog([], nTest(Int(0))) );
    if(ret.third == "") { Some(ret.first); } else { None() }
}


//unionl = "(" ws helper+:d body:l")"
//helper = body:b ws "U" ws