import maybe;
import string;
import lingo/pegcode/driver;
import ds/tree;
import ds/array;
import dynamic;

export{
    Prog: (h: [Decl], b: Body);
    Decl: (v: Var, t: Type);

    Val ::= Int, Arr;
    Int: (v: int);
    Arr: (a: [Val]);
    
    Var(n: string);
    Type ::= bType, arrType;
    bType : (t: string);
    arrType : (t: Type);

    Body ::= nAssign, nTest, nSeq, nUnion, nIter, aIter, nPrint;
    nAssign: (v: Var, e: Exp);
    nTest:  (e: Exp);
    nSeq: (b: [Body]);
    nUnion: (b: [Body]);
    nIter: (b: Body);
    aIter: (a: Annotation, i: nIter);
    nPrint: (e: Exp);

    Exp ::= Val, Var, Sum, Sub, Prod, Div, aSet, aGet, aLen, Not, Less;
    Sum : (l: Exp, r: Exp);
    Prod : (l: Exp, r: Exp);
    Sub : (l: Exp, r: Exp);
    Div : (l: Exp, r: Exp);
    // TODO: move out of Exp
    aSet : (a: Var, i: Int, v: Exp); 
    aGet : (a: Var, i: Int);
    aLen : (a: Var);
    Not(e: Exp);
    Less : (l: Exp, r: Exp);

    Annotation : (f: Formula);
    Formula ::= Forall, Exists, Or, And, Impl, Neg;
    Forall : (x: Var, e: Formula);
    Exists : (x: Var, e: Formula);
    Or : (l: Formula, r: Formula);
    And : (l: Formula, r: Formula);
    Impl : (l: Formula, r: Formula);
    Neg : (e:Formula);

    parse(s: string) -> Maybe<Prog>;
    // no pr2s for now
}

grammar = "#include nemo.lingo";

buildUnion(xs : [flow]) -> nUnion{
    nUnion(arrayPush(xs[0], xs[1]));
}

buildSeq(xs : [flow]) -> nSeq{
    nSeq(arrayPush(xs[0], xs[1]));
}

buildWhile(xs: [flow]) -> nSeq{
    nSeq([nIter(nSeq([nTest(xs[0]), xs[1]])), nTest(Not(xs[0])) ]);
}

buildaWhile(xs: [flow]) -> nSeq{
    nSeq([aIter(xs[0], nIter(nSeq([nTest(xs[1]), xs[2]]))), nTest(Not(xs[1])) ]);
}

parse(s: string) -> Maybe<Prog>{
    parser = compilePegGrammar(grammar);
    specialPegActions = {
        t = setTree(defaultPegActions.t, "buildUnion", buildUnion);
        t2 = setTree(t, "buildSeq", buildSeq);
        t3 = setTree(t2, "buildWhile", buildWhile);
        t4 = setTree(t3, "buildaWhile", buildaWhile);
        SemanticActions(t4);
    }
    ret = parsic3(parser, s, specialPegActions, Prog([], nTest(Int(0))) );
    if(ret.third == "") { Some(ret.first); } else { println(ret.third); None() }
}


//unionl = "(" ws helper+:d body:l")"
//helper = body:b ws "U" ws