import runtime;
import maybe;
import nemo_parser;
import nemo_translator;
import nemo_verifier;

testGet(i: int, s: string, verbose: bool) -> string {
    example = getFileContent(s);
    println("TEST" + i2s(i) + ":" + s + ":");
    if(verbose){println(example)};
    example
}

testParse(rt: string, verbose: bool) -> Prog{
    p1 = parse(rt);
    p1sure = either(p1, ErrorProg);
    println("   PARSING:");
    if(p1sure == ErrorProg){
        println("   Error:Parse");
        quit(-1);
    } else {
        if(verbose){
            println(p1sure);
        } else {
            println("   Success");
        }
    }
    p1sure
}

testTranslate(p: Prog, verbose: bool) -> vProg{
    println("   TRANSLATING:");
    p2 = n2v(p);
    if(verbose){
        println(p2);
    } else {
        println("   Success")
    }
    p2
}

testExecute(v: vProg, verbose: bool) {
    println("   RUNNING:");
    vExecute(v);
}

testVerify(p: Prog, verbose: bool) {
    println("   VERIFYING:");
    f1 = n2c(p);
    if(verbose){
        println(f1);
        println(c2s(f1));
    } else {
        println("   Success");
    }
}

testNemo(i: int, s: string, verbose: bool, skipExecute: bool) -> void {
    rawtext = testGet(i, s, verbose);
    parsedProg = testParse(rawtext, verbose);
    virtualProg = testTranslate(parsedProg, verbose);
    if(!skipExecute){
        testExecute(virtualProg, verbose);
    }
    testVerify(parsedProg, verbose);
    println("\n\n");
}

main(){
    // suffix -c stands for programs with removed parameters
    // use with skipExecute = true for producing verification formula
    // then insert with not() in z3 and check sat
    verbose = true;
    skipExecute = true;
    tests = ["example", "type", "test", "union", "long", "array", "while", "gcd", "swap", "sqrt", "sqrt-c"];
    mapi(tests, \i, x -> testNemo(i, "./test/" + x + ".txt", verbose, skipExecute));
}