import runtime;
import maybe;
import nemo_parser;
import nemo_translator;
import nemo_verifier;
import nemo_output;

testGet(i: int, s: string, verbose: bool) -> string {
    example = getFileContent("./test/" + s + ".txt");
    println("TEST" + i2s(i) + ":" + s + ":");
    if(verbose){println(example)};
    example
}

testParse(rt: string, verbose: bool) -> Prog{
    p1 = parse(rt);
    p1sure = either(p1, ErrorProg);
    println("   PARSING:");
    if(p1sure == ErrorProg){
        println("   Error:Parse");
        quit(-1);
    } else {
        if(verbose){
            println(p1sure);
        } else {
            println("   Success");
        }
    }
    p1sure
}

testTranslate(p: Prog, verbose: bool) -> vProg{
    println("   TRANSLATING:");
    p2 = n2v(p);
    if(verbose){
        println(p2);
    } else {
        println("   Success")
    }
    p2
}

testExecute(v: vProg, verbose: bool) {
    println("   RUNNING:");
    vExecute(v);
}

testVerify(s: string, p: Prog, verbose: bool) {
    println("   VERIFYING:");
    conditions = n2c(p);
    println(conditions.ac);
    println(conditions.vc);
    f_h = cond2hs(conditions);
    f_smt = cond2s(conditions);
    if(verbose){
        println(f_h);
    } else {
        println("   Success");
    }
    setFileContent("./out/" + s + ".smt", f_smt);
}

testNemo(i: int, s: string, verbose: bool, skipExecute: bool) -> void {
    rawtext = testGet(i, s, verbose);
    parsedProg = testParse(rawtext, verbose);
    virtualProg = testTranslate(parsedProg, verbose);
    if(!skipExecute){
        testExecute(virtualProg, verbose);
    }else{
        testVerify(s, parsedProg, verbose);
        nop();
    }
    println("\n\n");
}

main(){
    // suffix -c stands for programs with removed parameters
    // use with skipExecute = true for producing verification formula
    // then insert with not() in z3 and check sat
    verbose = true;
    skipExecute = true;
    tests = ["example", "type", "test", "union", "long", "array", "while", "gcd", "swap", "sqrt", "sqrt-c", "gcd-c"];
    mapi(tests, \i, x -> testNemo(i, x, verbose, skipExecute));
}