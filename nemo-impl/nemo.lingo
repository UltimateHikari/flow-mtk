prog = ws decl+:d "{" ws body:b ws "}" ws { Prog(:d, :b) };
decl = "VAR" ws var:v ws ":" ws type:t ws ";" ws   { Decl(:v, :t) };

val = int | arr;
int = digit+$v          { Int(s2i($v)) };
arr = "[" ws val*:a "]" { Arr(:a) };
entr = val ws;

var = char+$v   { Var($v)      };
digit = '0'-'9';
char = 'a'-'z' ;

type = primtype | arrtype;
primtype = "INT"                { bType("int") };
arrtype  = "[" ws type:t ws "]" { arrType(:t)  };

body = assign | test | seq | union | iter | print | while; 
assign = "(" ws var:v ws ":=" ws exp:e ws ")"                { nAssign(:v, :e)    };
test   = "(" ws exp:e ws "?"  ws ")"                         { nTest(:e)          };
seq    = "(" ws sentry+:e body:b ws ")"                      { buildSeq(:e, :b)   };
sentry = body:b ws ";" ws                                    { :b                 };
union  = "(" ws uentry+:e body:b ws ")"                      { buildUnion(:e, :b) };
uentry = body:b ws "U" ws                                    { :b                 };
iter   = "(" ws body:a ws "*" ws ")"                         { nIter(:a)          };
print  = "(" ws "PRINT" ws exp:e ws ")"                      { nPrint(:e)         };
while  = "(" ws "WHILE" ws exp:e ws "DO" ws body:b ws "DONE" ws ")" { buildWhile(:e, :b) };

exp = var | val | sum | sub | prod | div | set | get | len | not | less | more | eless | emore;
sum    = "(" ws exp:l ws "+" ws exp:r ws ")"            { Sum(:l, :r)      };
sub    = "(" ws exp:l ws "-" ws exp:r ws ")"            { Sub(:l, :r)      };
prod   = "(" ws exp:l ws "*" ws exp:r ws ")"            { Prod(:l, :r)     };
div    = "(" ws exp:l ws "/" ws exp:r ws ")"            { Div(:l, :r)      };
set    = "(" ws "SET" ws var:a ws int:i ws exp:v ws ")" { aSet(:a, :i, :v) };
get    = "(" ws "GET" ws var:a ws int:i ws ")"          { aGet(:a, :i)     };
len    = "(" ws "LEN" ws var:a ws ")"                   { aLen(:a)         };
not    = "(" ws "!" ws exp:e ws ")"                     { Not(:e)          };
less   = "(" ws exp:l ws "<" ws exp:r ws ")"            { Less(:l, :r)     };
more   = "(" ws exp:l ws ">" ws exp:r ws ")"            { Less(:r, :l)     };
eless   = "(" ws exp:l ws "<=" ws exp:r ws ")"          { Not(Less(:r, :l))};
emore   = "(" ws exp:l ws ">=" ws exp:r ws ")"          { Not(Less(:l, :r))};

ws = s*;
s = " " | "\t" | "\n";
comma = ws | ", ";